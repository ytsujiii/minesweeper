{"version":3,"sources":["types/SquareState.ts","Square.tsx","types/Game.ts","types/Coordinate.ts","Game.tsx","App.tsx","index.tsx"],"names":["SquareState","getSquareStateChar","state","zero","one","two","three","four","five","six","seven","eight","hidden","bomb","flagged","bombHidden","bombFlagged","bombExploded","flaggedIncorrect","isOpened","useStyles","makeStyles","square","width","height","border","display","justifyContent","alignItems","opened","backgroundColor","color","Square","props","classes","onLeftClick","onRightClick","className","clsx","onClick","onContextMenu","FinishStatus","Difficulty","toCoord","y","x","getFieldData","difficulty","normal","bombCount","expert","row","messagesRow","finishMessage","marginLeft","Game","field","useState","setFinishMessage","inGame","setInGame","restSquareCount","setRestSquareCount","firstClickedCoord","setFirstClickedCoord","squareStates","setSquareStates","useCallback","e","coord","putBombs","openSquare","preventDefault","toggleFlagSquare","newSquareStates","slice","isValidCoord","getAroundBombCount","forEach","dy","dx","newCoord","openedSquareCount","recur","onFinished","exploded","aroundBombCount","toSquareState","init","stateArray","Array","from","except","possibleBombLocations","_","i","filter","bombLocation","splice","Math","random","length","floor","finishStatus","finalSquareStates","completed","useEffect","Button","variant","Typography","map","mainContainer","marginTop","App","anchorEl","setAnchorEl","setField","onDifficultySelected","newDifficulty","AppBar","position","aria-controls","aria-haspopup","currentTarget","Menu","id","keepMounted","open","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ae35fd9.chunk.js","sourcesContent":["export enum SquareState {\n    zero,\n    one,\n    two,\n    three,\n    four,\n    five,\n    six,\n    seven,\n    eight,\n    hidden,\n    bomb,\n    flagged,\n    bombHidden,\n    bombFlagged,\n    bombExploded,\n    flaggedIncorrect,\n}\n\nexport const toSquareState = (bombCount: number): SquareState => {\n    switch(bombCount) {\n    case 0: return SquareState.zero;\n    case 1: return SquareState.one;\n    case 2: return SquareState.two;\n    case 3: return SquareState.three;\n    case 4: return SquareState.four;\n    case 5: return SquareState.five;\n    case 6: return SquareState.six;\n    case 7: return SquareState.seven;\n    case 8: return SquareState.eight;\n    default: return SquareState.hidden;\n    }\n};\n\nexport const getSquareStateChar = (state: SquareState): string => {\n    switch(state) {\n    case SquareState.zero: return ' ';\n    case SquareState.one: return '1';\n    case SquareState.two: return '2';\n    case SquareState.three: return '3';\n    case SquareState.four: return '4';\n    case SquareState.five: return '5';\n    case SquareState.six: return '6';\n    case SquareState.seven: return '7';\n    case SquareState.eight: return '8';\n    case SquareState.hidden: return ' ';\n    case SquareState.bomb: return 'B';\n    case SquareState.flagged: return 'F';\n    case SquareState.bombHidden: return ' ';\n    case SquareState.bombFlagged: return 'F';\n    case SquareState.bombExploded: return 'B';\n    case SquareState.flaggedIncorrect: return 'F';\n    default: return ' ';\n    }\n};\n\nexport const isOpened = (state: SquareState): boolean => {\n    return state !== SquareState.hidden\n        && state !== SquareState.bombHidden\n        && state !== SquareState.flagged\n        && state !== SquareState.bombFlagged\n        && state !== SquareState.bomb\n        && state !== SquareState.flaggedIncorrect;\n};\n\nexport const isFlagged = (state: SquareState): boolean => {\n    return state === SquareState.flagged\n        || state === SquareState.bombFlagged;\n};\n","import React from 'react';\nimport { getSquareStateChar, isOpened, SquareState } from './types/SquareState';\nimport { makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles({\n    square: {\n        width: '23px',\n        height: '23px',\n        border: '1px solid black',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    opened: {\n        backgroundColor: '#DDDDDD',\n    },\n    bombExploded: {\n        backgroundColor: 'red',\n    },\n    flaggedIncorrect: {\n        color: '#0000FF',\n    }\n});\n\ninterface Props {\n    state: SquareState;\n    onLeftClick: (e: React.MouseEvent<HTMLElement>) => void;\n    onRightClick: (e: React.MouseEvent<HTMLElement>) => void;\n}\n\nexport default function Square(props: Props): React.ReactElement {\n    const classes = useStyles();\n    const { state, onLeftClick, onRightClick } = props;\n    return (\n        <div\n            className={clsx(\n                classes.square,\n                isOpened(state) && classes.opened,\n                state === SquareState.bombExploded && classes.bombExploded,\n                state === SquareState.flaggedIncorrect && classes.flaggedIncorrect,\n            )}\n            onClick={onLeftClick}\n            onContextMenu={onRightClick}>\n            { getSquareStateChar(state) }\n        </div>\n    );\n}\n","export enum FinishStatus {\n    completed,\n    exploded,\n}\n\nexport enum Difficulty {\n    normal,\n    expert,\n}\n\nexport interface FieldData {\n    width: number,\n    height: number,\n    bombCount: number,\n}\n\nexport const getFieldData = (difficulty: Difficulty): FieldData => {\n    switch(difficulty) {\n    case Difficulty.normal:\n        return {\n            width: 16,\n            height: 16,\n            bombCount: 40,\n        };\n    case Difficulty.expert:\n        return {\n            width: 30,\n            height: 16,\n            bombCount: 99,\n        };\n    }\n};\n","export interface Coord {\n    y: number,\n    x: number,\n}\n\nexport const toCoord = (y: number, x: number): Coord => {\n    return { y, x };\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport Square from './Square';\nimport { isFlagged, isOpened, SquareState, toSquareState } from './types/SquareState';\nimport { Button, makeStyles, Typography } from '@material-ui/core';\nimport { Coord, toCoord } from './types/Coordinate';\nimport { FieldData, FinishStatus } from './types/Game';\n\nconst useStyles = makeStyles({\n    row: {\n        display: 'flex',\n    },\n    messagesRow: {\n        display: 'flex',\n    },\n    finishMessage: {\n        display: 'flex',\n        alignItems: 'center',\n        marginLeft: '20px',\n    },\n});\n\ninterface Props {\n    field: FieldData,\n}\n\nexport default function Game(props: Props): React.ReactElement {\n    const classes = useStyles();\n    const { field } = props;\n    const [finishMessage, setFinishMessage] = useState<string | null>(null);\n    const [inGame, setInGame] = useState<boolean>(false);\n    const [restSquareCount, setRestSquareCount] = useState<number>(0);\n    const [firstClickedCoord, setFirstClickedCoord] = useState<Coord | null>(null);\n    const [squareStates, setSquareStates] = useState<Array<Array<SquareState>> | null>(null);\n    const onLeftClick = useCallback((e: React.MouseEvent<HTMLElement>, coord: Coord) => {\n        if (!squareStates) {\n            return;\n        } else if (!inGame) {\n            return;\n        }\n        if (!firstClickedCoord) {\n            putBombs(coord);\n            setFirstClickedCoord(coord);\n            return;\n        } else if (isOpened(squareStates[coord.y][coord.x]) || isFlagged(squareStates[coord.y][coord.x])) {\n            return;\n        }\n        openSquare(coord, squareStates);\n    }, [squareStates, inGame]);\n    const onRightClick = useCallback((e: React.MouseEvent<HTMLElement>, coord: Coord) => {\n        e.preventDefault();\n        if (!inGame) {\n            return;\n        } else if (!firstClickedCoord) {\n            return;\n        }\n        toggleFlagSquare(coord);\n    }, [inGame, firstClickedCoord]);\n    const toggleFlagSquare = useCallback((coord: Coord): void => {\n        if (!squareStates) {\n            return;\n        }\n        const newSquareStates = squareStates.slice();\n        if (squareStates[coord.y][coord.x] === SquareState.hidden) {\n            newSquareStates[coord.y][coord.x] = SquareState.flagged;\n        } else if (squareStates[coord.y][coord.x] === SquareState.bombHidden) {\n            newSquareStates[coord.y][coord.x] = SquareState.bombFlagged;\n        } else if (squareStates[coord.y][coord.x] === SquareState.flagged) {\n            newSquareStates[coord.y][coord.x] = SquareState.hidden;\n        } else if (squareStates[coord.y][coord.x] === SquareState.bombFlagged) {\n            newSquareStates[coord.y][coord.x] = SquareState.bombHidden;\n        }\n        setSquareStates(newSquareStates);\n    }, [squareStates]);\n    const isValidCoord = (coord: Coord): boolean => {\n        return 0 <= coord.y && coord.y < field.height\n            && 0 <= coord.x && coord.x < field.width;\n    };\n    const getAroundBombCount = useCallback((coord: Coord): number => {\n        if (!squareStates) {\n            return 0;\n        }\n        let bombCount = 0;\n        [-1, 0, 1].forEach((dy) => {\n            [-1, 0, 1].forEach((dx) => {\n                if (dy === 0 && dx === 0) {\n                    return;\n                }\n\n                const newCoord = toCoord(coord.y + dy, coord.x + dx);\n                if (!isValidCoord(newCoord)) {\n                    return;\n                }\n\n                if (squareStates[coord.y + dy][coord.x + dx] === SquareState.bombHidden || squareStates[coord.y + dy][coord.x + dx] === SquareState.bombFlagged) {\n                    bombCount++;\n                }\n            });\n        });\n        return bombCount;\n    }, [squareStates]);\n    const openSquare = useCallback((coord: Coord, newSquareStates: Array<Array<SquareState>>): void => {\n        let openedSquareCount = 0;\n        const recur = (coord: Coord, newSquareStates: Array<Array<SquareState>>) => {\n            if (newSquareStates[coord.y][coord.x] === SquareState.bombHidden) {\n                newSquareStates[coord.y][coord.x] = SquareState.bombExploded;\n                onFinished(FinishStatus.exploded);\n                return;\n            } else if (newSquareStates[coord.y][coord.x] === SquareState.hidden) {\n                openedSquareCount++;\n                const aroundBombCount = getAroundBombCount(coord);\n                newSquareStates[coord.y][coord.x] = toSquareState(aroundBombCount);\n                if (aroundBombCount === 0) {\n                    [-1, 0, 1].forEach((dy) => {\n                        [-1, 0, 1].forEach((dx) => {\n                            if (dy === 0 && dx === 0) {\n                                return;\n                            }\n                            const newCoord = toCoord(coord.y + dy, coord.x + dx);\n                            if (!isValidCoord(newCoord)) {\n                                return;\n                            } else if (newSquareStates[coord.y + dy][coord.x + dx] !== SquareState.hidden) {\n                                return;\n                            }\n                            recur(newCoord, newSquareStates);\n                        });\n                    });\n                }\n            }\n        };\n        recur(coord, newSquareStates);\n        setRestSquareCount(restSquareCount - openedSquareCount);\n        setSquareStates([...newSquareStates]);\n    }, [squareStates, getAroundBombCount, restSquareCount]);\n    const init = useCallback((): void => {\n        const stateArray = Array.from(Array(field.height), () => {\n            return Array.from(Array(field.width), () => SquareState.hidden);\n        });\n        setSquareStates(stateArray);\n        setRestSquareCount(field.width * field.height - field.bombCount);\n        setFirstClickedCoord(null);\n        setInGame(true);\n        setFinishMessage(null);\n    }, [field]);\n    const putBombs = useCallback((except: Coord): void => {\n        const stateArray = Array.from(Array(field.height), () => {\n            return Array.from(Array(field.width), () => SquareState.hidden);\n        });\n        const possibleBombLocations: Array<number> = Array.from(Array(field.height * field.width), (_, i) => i)\n            .filter((_, i) => i !== field.height * except.y + except.x);\n        [...Array(field.bombCount)].forEach(() => {\n            const bombLocation = possibleBombLocations.splice(Math.random() * possibleBombLocations.length, 1)[0];\n            stateArray[Math.floor(bombLocation / field.width)][bombLocation % field.width] = SquareState.bombHidden;\n        });\n        setSquareStates(stateArray);\n    }, [field]);\n    const onFinished = useCallback((finishStatus: FinishStatus) => {\n        if (!squareStates) {\n            return;\n        }\n        const finalSquareStates = squareStates.slice();\n        Array.from(Array(field.height), (_, i) => i).forEach((y) => {\n            Array.from(Array(field.width), (_, i) => i).forEach((x) => {\n                if (finalSquareStates[y][x] === SquareState.bombHidden) {\n                    finalSquareStates[y][x] = finishStatus === FinishStatus.completed\n                        ? SquareState.bombFlagged\n                        : SquareState.bomb;\n                } else if (finalSquareStates[y][x] === SquareState.flagged) {\n                    finalSquareStates[y][x] = SquareState.flaggedIncorrect;\n                }\n            });\n        });\n        if (finishStatus === FinishStatus.exploded) {\n            setFinishMessage('Boooooom!');\n        } else if (finishStatus === FinishStatus.completed) {\n            setFinishMessage('Completed!');\n        }\n        setSquareStates(finalSquareStates);\n        setInGame(false);\n    }, [squareStates]);\n\n    useEffect(() => {\n        init();\n    }, [field]);\n    useEffect(() => {\n        if (!firstClickedCoord || !squareStates) {\n            return;\n        }\n        openSquare(firstClickedCoord, squareStates);\n    }, [firstClickedCoord]);\n    useEffect(() => {\n        if (restSquareCount === 0) {\n            onFinished(FinishStatus.completed);\n        }\n    }, [restSquareCount]);\n    return (\n        <div className=\"App\">\n            <Button onClick={init} color=\"primary\" variant=\"contained\">Start</Button>\n            <div className={classes.messagesRow}>\n                <Typography>Blocks remaining: {restSquareCount}</Typography>\n                <div className={classes.finishMessage}>{finishMessage}</div>\n            </div>\n            {squareStates && Array.from(Array(field.height)).map((_, y) => (\n                <div key={y} className={classes.row}>\n                    {Array.from(Array(field.width)).map((_, x) => (\n                        <Square\n                            key={x}\n                            state={squareStates[y][x]}\n                            onLeftClick={(e) => onLeftClick(e, toCoord(y, x))}\n                            onRightClick={(e) => onRightClick(e, toCoord(y, x))}\n                        />\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n}","import React, { useCallback, useState } from 'react';\nimport { AppBar, Button, Container, makeStyles, Menu, MenuItem } from '@material-ui/core';\nimport Game from './Game';\nimport { Difficulty, FieldData, getFieldData } from './types/Game';\n\nconst useStyles = makeStyles({\n    mainContainer: {\n        marginTop: '40px',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n});\n\nexport default function App(): React.ReactElement {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [field, setField] = useState<FieldData>(getFieldData(Difficulty.normal));\n    const onDifficultySelected = useCallback((newDifficulty: Difficulty) => {\n        setAnchorEl(null);\n        setField(getFieldData(newDifficulty));\n    }, []);\n    const handleClick = (e) => {\n        setAnchorEl(e.currentTarget);\n    };\n    return (\n        <>\n            <AppBar position=\"static\" color=\"default\">\n                <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                    Difficulty\n                </Button>\n                <Menu\n                    id=\"difficulty-menu\"\n                    keepMounted\n                    anchorEl={anchorEl}\n                    open={Boolean(anchorEl)}\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n                    transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n                >\n                    <MenuItem onClick={() => onDifficultySelected(Difficulty.normal)}>Normal</MenuItem>\n                    <MenuItem onClick={() => onDifficultySelected(Difficulty.expert)}>Expert</MenuItem>\n                </Menu>\n            </AppBar>\n            <Container className={classes.mainContainer}>\n                <Game field={field}/>\n            </Container>\n        </>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}